// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider            = "prisma-client-js"
}

datasource db {
  provider            = "postgresql"
  url                 = env("DATABASE_URL")
  shadowDatabaseUrl   = env("SHADOW_DATABASE_URL")
}


enum Gender {
  MALE
  FEMALE
  UNKNOWN
}


model Customer {
  id              String            @id   @db.Uuid()  @default(uuid())
  email           String            @unique
  cpf             String            @unique
  name            String
  phone           String?
  birthDate       DateTime          @db.Date
  password        String   
  gender          Gender            @default(UNKNOWN)
  points          Int               @default(0)
  sessions        Session[]
  activations     Activation[]
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


model Place {
  id              String            @id   @db.Uuid()  @default(uuid())
  name            String
  address         String
  bicycles        Bicycle[]
  lat             Float
  lng             Float
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


model Bicycle {
  id              String            @id   @db.Uuid()  @default(uuid())
  name            String
  code            String            @unique
  place           Place             @relation(fields: [placeId], references: [id])
  placeId         String            @db.Uuid()
  sessions        Session[]
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


enum SessionStatus {
  STARTING
  RUNNING
  ENDING
  CLOSED
}

model Session {
  id              String            @id   @db.Uuid()  @default(uuid())
  startAt         DateTime          @default(now())
  endAt           DateTime?
  points          Int               @default(0)
  status          SessionStatus     @default(STARTING)
  bicycle         Bicycle           @relation(fields: [bicycleId], references: [id])
  bicycleId       String            @db.Uuid()
  customer        Customer          @relation(fields: [customerId], references: [id])
  customerId      String            @db.Uuid()
  activities      Activity[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Activity {
  id              String            @id   @db.Uuid()  @default(uuid())
  when            DateTime          @default(now())
  points          Int               
  potency         Float             @default(0)
  cycles          Int               @default(0)
  session         Session           @relation(fields: [sessionId], references: [id])
  sessionId       String            @db.Uuid()
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Partner {
  id              String            @id   @db.Uuid()  @default(uuid())
  name            String
  description     String
  imageUrl        String
  offer           Offer[]
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Offer {
  id              String            @id   @db.Uuid()  @default(uuid())
  name            String
  description     String
  imageUrl        String
  cost            Int
  partner         Partner           @relation(fields: [partnerId], references: [id])
  partnerId       String            @db.Uuid()
  activations     Activation[]
  active          Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}


model Activation {
  id              String            @id   @db.Uuid()  @default(uuid())
  when            DateTime          @default(now())
  code            String            
  offer           Offer             @relation(fields: [offerId], references: [id])
  offerId         String            @db.Uuid()
  customer        Customer          @relation(fields: [customerId], references: [id])
  customerId      String            @db.Uuid()
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([offerId, code], name: "activation_offer_code_unique")
}